int check(int i1,int j1,vector< vector< int  > > m)
{
    for(int i=0;i<m.size();i++)
    {
        if(m[i][j1]==1)
            return 0;
    }
    for(int j=0;j<m[0].size();j++)
    {
        if(m[i1][j]==1)
            return 0;
    }
    int I = i1;
    int J = j1;
    while(I<m.size() && J<m[0].size() && I>=0 && J>=0)
    {
            if(m[I][J]==1)
            return 0;
            I = I -1;
            J = J -1;
    }
    I=i1;
    J=j1;
    while(I<m.size() && J<m[0].size() && I>=0 && J>=0)
    {
        
            if(m[I][J]==1)
            return 0;
            I = I +1;
            J = J +1;
    }
    I=i1;
    J=j1;
    while(I<m.size() && J<m[0].size() && I>=0 && J>=0)
    {
        
            if(m[I][J]==1)
            return 0;
            I = I -1;
            J = J +1;
    }
    I=i1;
    J=j1;
    while(I<m.size() && J<m[0].size()  && I>=0 && J>=0)
    {
        
            if(m[I][J]==1)
            return 0;
            I = I +1;
            J = J -1;
    }
    return 1;
}
void put_q(vector< vector< int> > &ans,int j,vector< vector < int  > > &A)
{
    if(j >= ans.size())
    {
        vector< int  > A1;
        int flag=0;
        for(int i=0;i<ans.size();i++)
        {
            for(int j=0;j<ans[0].size();j++)
            {
                if(ans[i][j]==1)
                    flag=1;
                A1.push_back(ans[i][j]);
            }
        }
        if(flag)
        A.push_back(A1);
        return ;
    }
    for(int i=(ans.size()-1);i>=0;i--)
    {
        if(check(i,j,ans))
        {
            ans[i][j]=1;
            put_q(ans,j+1,A);
            ans[i][j]=0;
           
        }   
    }
    return ;
}


vector<vector<int>> solveNQueens(int n) {
    // Write your code here.
    vector< vector< int > > ans(n,vector< int > (n,0));
    vector< vector< int > > a;
    put_q(ans,0,a);
    return a;
}