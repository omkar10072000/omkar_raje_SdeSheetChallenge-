bool Bi(vector<vector<int>> &edges,int curr,vector< int > &color,vector< int > g[],int c)
{
    if(color[curr]==-1)
    {
        color[curr]=c;
        bool ans =true;
        if(c==-2)
            c=-3;
        else
            c=-2;
        for(int i=0;i<g[curr].size();i++)
        {
            if(Bi(edges,g[curr][i],color,g,c)==false)
                return false;
        }
        return true;;
    }
    if(color[curr]==c)
        return true;
    else
        return false;
}
bool isGraphBirpatite(vector<vector<int>> &edges) {
	// Write your code here.
    vector< int > g[edges.size()+1];
    for(int i=0;i<edges.size();i++)
    {
       for(int j=0;j<edges.size();j++){
           
           if(edges[i][j]==1)
           {
               g[i].push_back(j);
               g[j].push_back(i);
              //   cout<<g[i][0]<<"  "<<g[j][0]<<endl;
           }
         
       }
    }
    
    vector< int > color(edges.size()+1,-1);
    vector< int > visit(edges.size()+1,0);
    int c = -2;
    for(int i=0;i<edges.size();i++)
    {
            if(color[i]== -1 && Bi(edges,i,color,g,c)==false)
                return false;
    }
    return true;
    
 // return false;
}